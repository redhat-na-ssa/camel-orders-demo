version: '3.7'

# NETWORKING README
#   This docker compose assumes a networking architecture where:
#     1)  containers are not in the same pod
#     2)  containers bind to the host and use the "port mapping" technique for deconfliction.
#   The above assumptions occur by default when running this docker-compose in rootless podman4 via the default slirp4netns network setup:
#     https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#slirp4netns
#
#   As such, the containers created as per this compose file are configured to all bind to different ports on the host.
#   You need to ensure your host is not already running processes that bind to ports specified in this docker-compose file.

services:

  mysql:
    container_name: mysql

    # TO-DO: run initialization *.sql scripts at start-up
    #image: registry.redhat.io/rhel8/mysql-80:1-258

    # Pushed from docker.io to quay.io (to avoid rate-limiting at docker hub)
    image: quay.io/jbride/mysql:8.0.33

    ports:
      - "3306:3306"
    environment:
      MYSQL_USER: mysql
      MYSQL_PASSWORD: mysql
      MYSQL_DATABASE: sampledb
      MYSQL_ROOT_PASSWORD: Abcd1234
    volumes:
    - ./mysql:/docker-entrypoint-initdb.d:bind
    networks:
      - rht-ml

  artemis:
    container_name: artemis
    image: quay.io/artemiscloud/activemq-artemis-broker-init:artemis.2.28.0
    ports:
      - "61616:61616"
      - "1883:1883"
      - "5672:5672"
      - "8161:8161"
    environment:
      AMQ_USER: admin
      AMQ_PASSWORD: admin
    networks:
      - rht-ml

  openldap:
    container_name: openldap

    # Alternative:  docker.io/bitnami/openldap
    image: docker.io/osixia/openldap:1.5.0

    restart: always
    ports:
      - "3389:389"
      - "6636:636"
    command: [--copy-service]
    volumes:
    - ./openldap/ldap-example-users-2.ldif:/container/service/slapd/assets/config/base/ldif/custom/ldap-example-users-2.ldif:bind
    #- ./openldap/ldap-generated.ldif:/container/service/slapd/assets/config/base/ldif/custom/ldap-generated.ldif:bind
    networks:
      - rht-ml

#  prometheus:
#    image: quay.io/prometheus/prometheus:v2.43.0
#    container_name: prometheus
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./monitoring/prometheus_scrape_configs.yml:/etc/prometheus/prometheus.yml
#    networks:
#      - rht-ml

  jaeger:
    image: jaegertracing/all-in-one:1
    container_name: jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14268"       # Accept thrift spans
      - "14250"       # Accept gRPC spans
    networks:
      - rht-ml

  otel-collector:
    image: otel/opentelemetry-collector:0.75.0
    container_name: otel-collector
    command:
      - "--config=/conf/otel-collector-config.yml"
    volumes:
      - ./monitoring/otel-collector-config.yml:/conf/otel-collector-config.yml
    ports:
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
    depends_on:
      - jaeger
    networks:
      - rht-ml

networks:
  rht-ml:
    name: rht-ml
    driver: bridge
